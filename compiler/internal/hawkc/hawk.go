// Code generated by goyacc -o hawk.go hawk.y. DO NOT EDIT.

//line hawk.y:2
// Package hawkc is the Hawk compiler.
package hawkc

import __yyfmt__ "fmt"

//line hawk.y:3

import (
	"bufio"
	"fmt"
	"io"

	"github.com/mibk/hawk/scan"
	"github.com/mibk/hawk/value"
)

var (
	progName string
	ast      *Program

	defaultAction = &BlockStmt{[]Stmt{&PrintStmt{Fun: "print"}}}
)

//line hawk.y:22
type yySymType struct {
	yys       int
	sym       string
	val       value.Value
	symlist   []string
	decl      Decl
	decllist  []Decl
	expr      Expr
	exprlist  []Expr
	stmt      Stmt
	stmtlist  []Stmt
	blockstmt *BlockStmt
}

const IDENT = 57346
const BOOL = 57347
const STRING = 57348
const PRINT = 57349
const NUM = 57350
const IF = 57351
const ELSE = 57352
const FOR = 57353
const IN = 57354
const BREAK = 57355
const CONTINUE = 57356
const INC = 57357
const DEC = 57358
const ADDEQ = 57359
const SUBEQ = 57360
const MULEQ = 57361
const DIVEQ = 57362
const MODEQ = 57363
const CONCATEQ = 57364
const FUNC = 57365
const RETURN = 57366
const OROR = 57367
const ANDAND = 57368
const EQ = 57369
const NE = 57370
const LE = 57371
const GE = 57372
const NOTMATCH = 57373

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"BOOL",
	"STRING",
	"PRINT",
	"NUM",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"BREAK",
	"CONTINUE",
	"INC",
	"DEC",
	"ADDEQ",
	"SUBEQ",
	"MULEQ",
	"DIVEQ",
	"MODEQ",
	"CONCATEQ",
	"FUNC",
	"RETURN",
	"'?'",
	"':'",
	"OROR",
	"ANDAND",
	"EQ",
	"NE",
	"LE",
	"GE",
	"'<'",
	"'>'",
	"'~'",
	"NOTMATCH",
	"'.'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"';'",
	"'('",
	"')'",
	"','",
	"'{'",
	"'}'",
	"'|'",
	"'='",
	"'['",
	"']'",
	"'$'",
	"'!'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line hawk.y:478

// Compile compiles a Hawk program (name) from src. It is not safe
// for concurrent use.
func Compile(name string, src io.Reader) (*Program, error) {
	progName = name
	sc := new(scan.Scanner)
	ast = NewProgram(sc)
	lexlineno = 1
	nlsemi = false
	l := &yyLex{reader: bufio.NewReader(src)}
	yyParse(l)
	analyse(ast, sc)
	return ast, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 17,
	15, 38,
	16, 38,
	17, 38,
	18, 38,
	19, 38,
	20, 38,
	21, 38,
	22, 38,
	50, 38,
	-2, 79,
	-1, 18,
	15, 39,
	16, 39,
	17, 39,
	18, 39,
	19, 39,
	20, 39,
	21, 39,
	22, 39,
	50, 39,
	-2, 84,
	-1, 29,
	47, 70,
	-2, 40,
	-1, 82,
	15, 38,
	16, 38,
	17, 38,
	18, 38,
	19, 38,
	20, 38,
	21, 38,
	22, 38,
	50, 38,
	-2, 79,
	-1, 84,
	47, 71,
	-2, 18,
}

const yyPrivate = 57344

const yyLast = 540

var yyAct = [...]int{
	15, 6, 19, 13, 72, 151, 80, 127, 135, 71,
	14, 46, 47, 48, 49, 50, 51, 58, 59, 57,
	52, 53, 54, 55, 56, 73, 77, 143, 70, 79,
	84, 76, 70, 83, 81, 126, 140, 88, 77, 69,
	42, 132, 93, 14, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 75, 90,
	121, 77, 125, 70, 8, 133, 7, 18, 137, 138,
	69, 129, 136, 131, 58, 59, 57, 52, 53, 54,
	55, 56, 28, 52, 53, 54, 55, 56, 18, 156,
	8, 39, 123, 57, 52, 53, 54, 55, 56, 43,
	18, 44, 45, 46, 47, 48, 49, 50, 51, 58,
	59, 57, 52, 53, 54, 55, 56, 121, 125, 145,
	8, 73, 142, 149, 128, 148, 144, 145, 161, 152,
	154, 155, 130, 41, 157, 54, 55, 56, 12, 160,
	159, 162, 17, 32, 31, 25, 30, 28, 9, 29,
	147, 22, 23, 163, 165, 83, 166, 167, 164, 26,
	95, 3, 24, 17, 32, 31, 25, 30, 28, 153,
	29, 38, 22, 23, 150, 92, 33, 34, 10, 40,
	94, 1, 36, 24, 11, 8, 21, 78, 20, 37,
	158, 27, 35, 85, 86, 87, 146, 33, 34, 16,
	2, 91, 5, 36, 4, 0, 0, 0, 0, 0,
	37, 0, 27, 35, 0, 0, 0, 0, 0, 43,
	18, 44, 45, 46, 47, 48, 49, 50, 51, 58,
	59, 57, 52, 53, 54, 55, 56, 0, 82, 32,
	31, 25, 30, 28, 0, 29, 141, 22, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 33, 34, 0, 74, 32, 31, 36, 30,
	0, 0, 0, 0, 0, 37, 0, 27, 35, 43,
	0, 44, 45, 46, 47, 48, 49, 50, 51, 58,
	59, 57, 52, 53, 54, 55, 56, 0, 0, 33,
	34, 8, 74, 32, 31, 36, 30, 0, 0, 0,
	0, 0, 37, 124, 27, 35, 0, 0, 0, 74,
	32, 31, 0, 30, 0, 0, 0, 0, 0, 0,
	74, 32, 31, 0, 30, 0, 33, 34, 0, 0,
	0, 0, 36, 122, 0, 0, 0, 0, 0, 37,
	0, 27, 35, 33, 34, 0, 74, 32, 31, 36,
	30, 0, 0, 0, 33, 34, 37, 120, 27, 35,
	36, 0, 0, 0, 0, 0, 0, 37, 89, 27,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	33, 34, 0, 0, 0, 0, 36, 74, 32, 31,
	0, 30, 0, 37, 0, 27, 35, 43, 0, 44,
	45, 46, 47, 48, 49, 50, 51, 58, 59, 57,
	52, 53, 54, 55, 56, 0, 0, 134, 0, 0,
	0, 33, 34, 0, 0, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 35, 43, 139,
	44, 45, 46, 47, 48, 49, 50, 51, 58, 59,
	57, 52, 53, 54, 55, 56, 43, 0, 44, 45,
	46, 47, 48, 49, 50, 51, 58, 59, 57, 52,
	53, 54, 55, 56, 67, 68, 61, 62, 63, 64,
	65, 66, 45, 46, 47, 48, 49, 50, 51, 58,
	59, 57, 52, 53, 54, 55, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
}

var yyPact = [...]int{
	53, -1000, 115, -1000, -1000, -1000, -1000, 184, 148, 53,
	57, 100, -9, -1000, -1000, 461, 489, -12, -42, -1000,
	-1000, -1000, -1000, -1000, 372, 372, -1000, 413, 372, 244,
	-1000, -1000, -1000, 413, 413, 413, 372, 346, -1000, 181,
	-6, 148, 164, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, -1000, -1000, 335,
	318, 281, -1000, 461, -16, -44, 88, 461, -1000, 274,
	99, 27, 29, -1000, 461, -1000, -1000, -1000, 402, -1000,
	36, 33, -1000, -1000, -9, -1000, 443, 484, -18, 49,
	49, 49, 49, 49, 49, 105, 105, -1000, -1000, -1000,
	55, 66, 66, 461, 461, 461, 461, 461, 461, 461,
	-14, 204, -1000, 36, -23, 84, 372, 372, 372, 150,
	372, -1000, 372, 180, -1000, -47, 372, 27, 175, 372,
	372, -1000, 54, 372, -1000, 461, -1000, 83, 95, 274,
	151, -1000, -1000, -1000, 461, 461, -1000, 461, -1000, -1000,
	-1000, 169, -1000, 372, 27, 274, -1000, -1000,
}

var yyPgo = [...]int{
	0, 171, 214, 212, 211, 210, 0, 4, 169, 68,
	209, 31, 148, 3, 6, 2, 206, 200, 198, 196,
	1, 194, 191, 189, 8,
}

var yyR1 = [...]int{
	0, 22, 5, 5, 1, 1, 2, 3, 4, 4,
	4, 20, 21, 21, 21, 12, 12, 12, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 10, 10,
	14, 14, 15, 16, 16, 17, 17, 18, 18, 19,
	19, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	7, 7, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 9, 9, 11, 11, 23,
	23, 24, 24,
}

var yyR2 = [...]int{
	0, 2, 1, 3, 1, 1, 1, 6, 0, 1,
	3, 4, 0, 1, 3, 1, 1, 3, 1, 3,
	5, 5, 3, 3, 3, 3, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	0, 1, 4, 0, 2, 1, 1, 7, 3, 5,
	7, 1, 5, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 1, 1, 1, 2, 2, 2, 3, 1,
	3, 5, 2, 4, 1, 4, 4, 1, 3, 0,
	1, 0, 1,
}

var yyChk = [...]int{
	-1000, -22, -5, -1, -2, -3, -20, 23, 47, 43,
	4, -21, -12, -13, -20, -6, -10, 4, -9, -15,
	-18, -19, 13, 14, 24, 7, -8, 53, 9, 11,
	8, 6, 5, 38, 39, 54, 44, 51, -1, 44,
	-23, 43, 49, 25, 27, 28, 29, 30, 31, 32,
	33, 34, 38, 39, 40, 41, 42, 37, 35, 36,
	50, 17, 18, 19, 20, 21, 22, 15, 16, 51,
	44, 51, -7, -6, 4, -9, -11, -6, -8, -6,
	-14, -7, 4, -13, -6, -8, -8, -8, -6, 52,
	-11, -4, 4, 48, -12, 6, -6, -6, -6, -6,
	-6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
	-6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
	52, -6, 45, -11, 52, -6, 51, 51, 46, -20,
	43, -20, 12, 46, 45, -24, 46, 45, 46, 26,
	50, 52, -24, 50, 52, -6, -16, 10, -7, -6,
	4, 52, -20, 4, -6, -6, 45, -6, -17, -15,
	-20, 43, -20, 12, -14, -6, -20, -20,
}

var yyDef = [...]int{
	0, -2, 0, 2, 4, 5, 6, 0, 12, 1,
	0, 89, 13, 15, 16, 18, 0, -2, -2, 30,
	31, 32, 33, 34, 70, 37, 51, 0, 0, -2,
	72, 73, 74, 0, 0, 0, 0, 0, 3, 8,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 28, 29, 0,
	0, 0, 35, 71, 79, 84, 36, 87, 53, 0,
	0, 0, -2, 41, -2, 75, 76, 77, 0, 82,
	91, 0, 9, 11, 14, 17, 0, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 19, 22, 23, 24, 25, 26, 27,
	0, 0, 80, 91, 0, 0, 0, 0, 0, 43,
	70, 48, 0, 0, 78, 0, 92, 0, 0, 0,
	0, 85, 0, 0, 86, 88, 42, 0, 0, 0,
	0, 83, 7, 10, 52, 20, 81, 21, 44, 45,
	46, 40, 49, 0, 0, 0, 47, 50,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 54, 3, 3, 53, 42, 3, 3,
	44, 45, 40, 38, 46, 39, 37, 41, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 26, 43,
	33, 50, 34, 25, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 51, 3, 52, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 47, 49, 48, 35,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 27, 28, 29, 30, 31, 32, 36,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:65
		{
			for _, d := range yyDollar[1].decllist {
				switch d := d.(type) {
				case *Action:
					ast.Actions = append(ast.Actions, d)
				case *FuncDecl:
					ast.funcs[d.Name] = d
				default:
					panic(fmt.Sprintf("unexpected type: %T", d))
				}
			}
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:80
		{
			yyVAL.decllist = []Decl{yyDollar[1].decl}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:84
		{
			yyVAL.decllist = append(yyDollar[1].decllist, yyDollar[3].decl)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:90
		{
			yyVAL.decl = yyDollar[1].decl
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:94
		{
			yyVAL.decl = yyDollar[1].decl
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:100
		{
			yyVAL.decl = &Action{yyDollar[1].blockstmt}
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
//line hawk.y:106
		{
			yyVAL.decl = &FuncDecl{&FuncScope{}, yyDollar[2].sym, yyDollar[4].symlist, yyDollar[6].blockstmt}
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
//line hawk.y:111
		{
			yyVAL.symlist = nil
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:115
		{
			yyVAL.symlist = []string{yyDollar[1].sym}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:119
		{
			yyVAL.symlist = append(yyDollar[1].symlist, yyDollar[3].sym)
		}
	case 11:
		yyDollar = yyS[yypt-4 : yypt+1]
//line hawk.y:125
		{
			yyVAL.blockstmt = &BlockStmt{yyDollar[2].stmtlist}
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
//line hawk.y:130
		{
			yyVAL.stmtlist = nil
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:134
		{
			yyVAL.stmtlist = []Stmt{yyDollar[1].stmt}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:138
		{
			yyVAL.stmtlist = append(yyDollar[1].stmtlist, yyDollar[3].stmt)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:144
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:148
		{
			yyVAL.stmt = yyDollar[1].blockstmt
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:152
		{
			yyVAL.stmt = &PipeStmt{genDebugInfo(), yyDollar[1].stmt, yyDollar[3].sym}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:158
		{
			yyVAL.stmt = &ExprStmt{yyDollar[1].expr}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:162
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
//line hawk.y:169
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, &IndexExpr{genDebugInfo(), &Ident{Name: yyDollar[1].sym}, nil}, yyDollar[5].expr}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line hawk.y:173
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, &IndexExpr{genDebugInfo(), yyDollar[1].expr, nil}, yyDollar[5].expr}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:178
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, yyDollar[1].expr, &BinaryExpr{genDebugInfo(), Add, yyDollar[1].expr, yyDollar[3].expr}}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:182
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, yyDollar[1].expr, &BinaryExpr{genDebugInfo(), Sub, yyDollar[1].expr, yyDollar[3].expr}}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:186
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, yyDollar[1].expr, &BinaryExpr{genDebugInfo(), Mul, yyDollar[1].expr, yyDollar[3].expr}}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:190
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, yyDollar[1].expr, &BinaryExpr{genDebugInfo(), Div, yyDollar[1].expr, yyDollar[3].expr}}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:194
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, yyDollar[1].expr, &BinaryExpr{genDebugInfo(), Mod, yyDollar[1].expr, yyDollar[3].expr}}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:198
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, yyDollar[1].expr, &BinaryExpr{genDebugInfo(), Concat, yyDollar[1].expr, yyDollar[3].expr}}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:202
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, yyDollar[1].expr, &BinaryExpr{genDebugInfo(), Add, yyDollar[1].expr, BasicLit{value.NewNumber(1)}}}
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:206
		{
			yyVAL.stmt = &AssignStmt{genDebugInfo(), nil, yyDollar[1].expr, &BinaryExpr{genDebugInfo(), Sub, yyDollar[1].expr, BasicLit{value.NewNumber(1)}}}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:210
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:214
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:218
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:222
		{
			yyVAL.stmt = &StatusStmt{StatusBreak}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:226
		{
			yyVAL.stmt = &StatusStmt{StatusContinue}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:230
		{
			yyVAL.stmt = &ReturnStmt{X: yyDollar[2].expr}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:234
		{
			yyVAL.stmt = &PrintStmt{genDebugInfo(), nil, yyDollar[1].sym, yyDollar[2].exprlist}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:238
		{
			yyVAL.stmt = &PrintStmt{genDebugInfo(), nil, yyDollar[1].sym, nil}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:244
		{
			yyVAL.expr = &Ident{ast, yyDollar[1].sym}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:248
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line hawk.y:253
		{
			yyVAL.stmt = nil
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:257
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line hawk.y:263
		{
			yyVAL.stmt = &IfStmt{genDebugInfo(), yyDollar[2].expr, yyDollar[3].blockstmt, yyDollar[4].stmt}
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line hawk.y:268
		{
			yyVAL.stmt = nil
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:272
		{
			yyVAL.stmt = yyDollar[2].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:278
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:282
		{
			yyVAL.stmt = yyDollar[1].blockstmt
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line hawk.y:288
		{
			yyVAL.stmt = &ForStmt{genDebugInfo(), yyDollar[2].stmt, yyDollar[4].expr, yyDollar[6].stmt, yyDollar[7].blockstmt}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:292
		{
			yyVAL.stmt = &ForStmt{genDebugInfo(), nil, yyDollar[2].expr, nil, yyDollar[3].blockstmt}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line hawk.y:298
		{
			yyVAL.stmt = &ForeachStmt{genDebugInfo(), &Ident{Name: yyDollar[2].sym}, nil, yyDollar[4].expr, yyDollar[5].blockstmt}
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line hawk.y:302
		{
			yyVAL.stmt = &ForeachStmt{genDebugInfo(), &Ident{Name: yyDollar[2].sym}, &Ident{Name: yyDollar[4].sym}, yyDollar[6].expr, yyDollar[7].blockstmt}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:309
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line hawk.y:313
		{
			yyVAL.expr = &TernaryExpr{genDebugInfo(), yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:317
		{
			yyVAL.expr = &FieldExpr{genDebugInfo(), nil, yyDollar[2].expr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:321
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), OrOr, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:325
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), AndAnd, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:329
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), Eq, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:333
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), NotEq, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:337
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), LtEq, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:341
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), GtEq, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:345
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), Lt, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:349
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), Gt, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:353
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), Add, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:357
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), Sub, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:361
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), Mul, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:365
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), Div, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:369
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), Mod, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:373
		{
			yyVAL.expr = &BinaryExpr{genDebugInfo(), Concat, yyDollar[1].expr, yyDollar[3].expr}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:377
		{
			yyVAL.expr = &MatchExpr{genDebugInfo(), yyDollar[1].expr, yyDollar[3].expr, true}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:381
		{
			yyVAL.expr = &MatchExpr{genDebugInfo(), yyDollar[1].expr, yyDollar[3].expr, false}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line hawk.y:386
		{
			yyVAL.expr = nil
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:390
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:397
		{
			yyVAL.expr = BasicLit{yyDollar[1].val}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:401
		{
			yyVAL.expr = BasicLit{value.NewString(yyDollar[1].sym)}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:405
		{
			yyVAL.expr = BasicLit{value.NewBool(yyDollar[1].sym == "true")}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:409
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:413
		{
			yyVAL.expr = &UnaryExpr{genDebugInfo(), Minus, yyDollar[2].expr}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:417
		{
			yyVAL.expr = &UnaryExpr{genDebugInfo(), Not, yyDollar[2].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:421
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:425
		{
			yyVAL.expr = &Ident{Name: yyDollar[1].sym}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:429
		{
			yyVAL.expr = &CallExpr{genDebugInfo(), yyDollar[1].sym, nil}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line hawk.y:433
		{
			yyVAL.expr = &CallExpr{genDebugInfo(), yyDollar[1].sym, yyDollar[3].exprlist}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line hawk.y:437
		{
			yyVAL.expr = &ArrayLit{}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line hawk.y:441
		{
			yyVAL.expr = &ArrayLit{yyDollar[2].exprlist}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:445
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line hawk.y:452
		{
			yyVAL.expr = &IndexExpr{genDebugInfo(), &Ident{Name: yyDollar[1].sym}, yyDollar[3].expr}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line hawk.y:456
		{
			yyVAL.expr = &IndexExpr{genDebugInfo(), yyDollar[1].expr, yyDollar[3].expr}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line hawk.y:463
		{
			yyVAL.exprlist = []Expr{yyDollar[1].expr}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line hawk.y:467
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	}
	goto yystack /* stack new state and value */
}
